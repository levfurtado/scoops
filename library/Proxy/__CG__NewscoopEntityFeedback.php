<?php

namespace Proxy\__CG__\Newscoop\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Feedback extends \Newscoop\Entity\Feedback implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'user', 'section', 'publication', 'article', 'message', 'url', 'subject', 'status', 'time_created', 'time_updated', 'status_enum', 'attachment_type_enum', 'attachment_type', 'attachment_id');
        }

        return array('__isInitialized__', 'id', 'user', 'section', 'publication', 'article', 'message', 'url', 'subject', 'status', 'time_created', 'time_updated', 'status_enum', 'attachment_type_enum', 'attachment_type', 'attachment_id');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Feedback $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($p_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($p_id));

        return parent::setId($p_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimeCreated(\DateTime $p_datetime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimeCreated', array($p_datetime));

        return parent::setTimeCreated($p_datetime);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeCreated', array());

        return parent::getTimeCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimeUpdated(\DateTime $p_datetime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimeUpdated', array($p_datetime));

        return parent::setTimeUpdated($p_datetime);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeUpdated', array());

        return parent::getTimeUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($p_url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($p_url));

        return parent::setUrl($p_url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubject($p_subject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubject', array($p_subject));

        return parent::setSubject($p_subject);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubject', array());

        return parent::getSubject();
    }

    /**
     * {@inheritDoc}
     */
    public function setMessage($p_message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', array($p_message));

        return parent::setMessage($p_message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', array());

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Newscoop\Entity\User $p_user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($p_user));

        return parent::setUser($p_user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setSection(\Newscoop\Entity\Section $p_section)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSection', array($p_section));

        return parent::setSection($p_section);
    }

    /**
     * {@inheritDoc}
     */
    public function getSection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSection', array());

        return parent::getSection();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublication(\Newscoop\Entity\Publication $p_publication)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublication', array($p_publication));

        return parent::setPublication($p_publication);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublication()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublication', array());

        return parent::getPublication();
    }

    /**
     * {@inheritDoc}
     */
    public function setArticle(\Newscoop\Entity\Article $p_article)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticle', array($p_article));

        return parent::setArticle($p_article);
    }

    /**
     * {@inheritDoc}
     */
    public function getArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticle', array());

        return parent::getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachmentType($attachment_type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachmentType', array($attachment_type));

        return parent::setAttachmentType($attachment_type);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachmentType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachmentType', array());

        return parent::getAttachmentType();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachmentId($attachment_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachmentId', array($attachment_id));

        return parent::setAttachmentId($attachment_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachmentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachmentId', array());

        return parent::getAttachmentId();
    }

}
