<?php

namespace Proxy\__CG__\Newscoop\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Comment extends \Newscoop\Entity\Comment implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'allowedEmpty', 'allowedTags', 'status_enum', 'id', 'commenter', 'forum', 'parent', 'thread', 'language', 'subject', 'message', 'thread_level', 'thread_order', 'status', 'ip', 'time_created', 'time_updated', 'likes', 'dislikes', 'recommended', 'indexed', 'source');
        }

        return array('__isInitialized__', 'allowedEmpty', 'allowedTags', 'status_enum', 'id', 'commenter', 'forum', 'parent', 'thread', 'language', 'subject', 'message', 'thread_level', 'thread_order', 'status', 'ip', 'time_created', 'time_updated', 'likes', 'dislikes', 'recommended', 'indexed', 'source');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Comment $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimeCreated(\DateTime $datetime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimeCreated', array($datetime));

        return parent::setTimeCreated($datetime);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeCreated', array());

        return parent::getTimeCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimeUpdated(\DateTime $datetime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimeUpdated', array($datetime));

        return parent::setTimeUpdated($datetime);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeUpdated', array());

        return parent::getTimeUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubject($subject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubject', array($subject));

        return parent::setSubject($subject);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubject', array());

        return parent::getSubject();
    }

    /**
     * {@inheritDoc}
     */
    public function setMessage($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', array($message));

        return parent::setMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', array());

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setIp($ip)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIp', array($ip));

        return parent::setIp($ip);
    }

    /**
     * {@inheritDoc}
     */
    public function getIp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIp', array());

        return parent::getIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecommended($recommended)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecommended', array($recommended));

        return parent::setRecommended($recommended);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecommended()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecommended', array());

        return parent::getRecommended();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommenter(\Newscoop\Entity\Comment\Commenter $commenter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommenter', array($commenter));

        return parent::setCommenter($commenter);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommenter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommenter', array());

        return parent::getCommenter();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getCommenterName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommenterName', array());

        return parent::getCommenterName();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function getCommenterEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommenterEmail', array());

        return parent::getCommenterEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setForum(\Newscoop\Entity\Publication $forum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForum', array($forum));

        return parent::setForum($forum);
    }

    /**
     * {@inheritDoc}
     */
    public function getForum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForum', array());

        return parent::getForum();
    }

    /**
     * {@inheritDoc}
     */
    public function setThread($thread)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThread', array($thread));

        return parent::setThread($thread);
    }

    /**
     * {@inheritDoc}
     */
    public function getThread()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThread', array());

        return parent::getThread();
    }

    /**
     * {@inheritDoc}
     */
    public function setThreadLevel($level)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThreadLevel', array($level));

        return parent::setThreadLevel($level);
    }

    /**
     * {@inheritDoc}
     */
    public function getThreadLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThreadLevel', array());

        return parent::getThreadLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function setThreadOrder($order)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThreadOrder', array($order));

        return parent::setThreadOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getThreadOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThreadOrder', array());

        return parent::getThreadOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguage(\Newscoop\Entity\Language $language)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguage', array($language));

        return parent::setLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguage', array());

        return parent::getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Newscoop\Entity\Comment $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', array($parent));

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', array());

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentId', array());

        return parent::getParentId();
    }

    /**
     * {@inheritDoc}
     */
    public function getLikes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLikes', array());

        return parent::getLikes();
    }

    /**
     * {@inheritDoc}
     */
    public function getDislikes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDislikes', array());

        return parent::getDislikes();
    }

    /**
     * {@inheritDoc}
     */
    public function getRealName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRealName', array());

        return parent::getRealName();
    }

    /**
     * {@inheritDoc}
     */
    public function SameAs($comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'SameAs', array($comment));

        return parent::SameAs($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function exists()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'exists', array());

        return parent::exists();
    }

    /**
     * {@inheritDoc}
     */
    public function getProperty($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperty', array($key));

        return parent::getProperty($key);
    }

    /**
     * {@inheritDoc}
     */
    public function setIndexed(\DateTime $indexed = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIndexed', array($indexed));

        return parent::setIndexed($indexed);
    }

    /**
     * {@inheritDoc}
     */
    public function getIndexed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIndexed', array());

        return parent::getIndexed();
    }

    /**
     * {@inheritDoc}
     */
    public function getSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', array());

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setSource($source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', array($source));

        return parent::setSource($source);
    }

}
