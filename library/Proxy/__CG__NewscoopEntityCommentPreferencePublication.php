<?php

namespace Proxy\__CG__\Newscoop\Entity\Comment\Preference;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Publication extends \Newscoop\Entity\Comment\Preference\Publication implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'enabled', 'article_default_enabled', 'subscribers_moderated', 'public_moderated', 'public_enabled', 'captcha_enabled', 'spam_blocking_enabled', 'moderator_to', 'moderator_from');
        }

        return array('__isInitialized__', 'id', 'enabled', 'article_default_enabled', 'subscribers_moderated', 'public_moderated', 'public_enabled', 'captcha_enabled', 'spam_blocking_enabled', 'moderator_to', 'moderator_from');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Publication $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId(\Newscoop\Entity\Publication $p_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($p_id));

        return parent::setId($p_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($p_enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', array($p_enabled));

        return parent::setEnabled($p_enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', array());

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setArticleDefaultEnabled($p_article_default_enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticleDefaultEnabled', array($p_article_default_enabled));

        return parent::setArticleDefaultEnabled($p_article_default_enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getArticleDefaultEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticleDefaultEnabled', array());

        return parent::getArticleDefaultEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubscribersModerated($p_subscribers_moderated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubscribersModerated', array($p_subscribers_moderated));

        return parent::setSubscribersModerated($p_subscribers_moderated);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubscribersModerated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubscribersModerated', array());

        return parent::getSubscribersModerated();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublicModerated($p_public_moderated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublicModerated', array($p_public_moderated));

        return parent::setPublicModerated($p_public_moderated);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublicModerated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublicModerated', array());

        return parent::getPublicModerated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCaptchaEnabled($p_captcha_enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCaptchaEnabled', array($p_captcha_enabled));

        return parent::setCaptchaEnabled($p_captcha_enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getCaptchaEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCaptchaEnabled', array());

        return parent::getCaptchaEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpamBlockingEnabled($p_spam_blocking_enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpamBlockingEnabled', array($p_spam_blocking_enabled));

        return parent::setSpamBlockingEnabled($p_spam_blocking_enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpamBlockingEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpamBlockingEnabled', array());

        return parent::getSpamBlockingEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setModeratorTo($p_moderator_to)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModeratorTo', array($p_moderator_to));

        return parent::setModeratorTo($p_moderator_to);
    }

    /**
     * {@inheritDoc}
     */
    public function getModeratorTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModeratorTo', array());

        return parent::getModeratorTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setModeratorFrom($p_moderator_from)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModeratorFrom', array($p_moderator_from));

        return parent::setModeratorFrom($p_moderator_from);
    }

    /**
     * {@inheritDoc}
     */
    public function getModeratorFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModeratorFrom', array());

        return parent::getModeratorFrom();
    }

}
