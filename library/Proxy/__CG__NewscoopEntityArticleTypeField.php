<?php

namespace Proxy\__CG__\Newscoop\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ArticleTypeField extends \Newscoop\Entity\ArticleTypeField implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'name', 'articleType', 'typeHack', 'length', 'type', 'fieldWeight', 'isHidden', 'commentsEnabled', 'phrase', 'phraseId', 'fieldTypeParam', 'isContentField', 'showInEditor');
        }

        return array('__isInitialized__', 'name', 'articleType', 'typeHack', 'length', 'type', 'fieldWeight', 'isHidden', 'commentsEnabled', 'phrase', 'phraseId', 'fieldTypeParam', 'isContentField', 'showInEditor');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ArticleTypeField $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getArticleType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticleType', array());

        return parent::getArticleType();
    }

    /**
     * {@inheritDoc}
     */
    public function setArticleType(\Newscoop\Entity\ArticleType $type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticleType', array($type));

        return parent::setArticleType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function setArticleTypeHack(\Newscoop\Entity\ArticleType $type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticleTypeHack', array($type));

        return parent::setArticleTypeHack($type);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getName();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getLength()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLength', array());

        return parent::getLength();
    }

    /**
     * {@inheritDoc}
     */
    public function setLength($val)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLength', array($val));

        return parent::setLength($val);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($val)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($val));

        return parent::setType($val);
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldWeight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldWeight', array());

        return parent::getFieldWeight();
    }

    /**
     * {@inheritDoc}
     */
    public function setFieldWeight($fieldWeight)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFieldWeight', array($fieldWeight));

        return parent::setFieldWeight($fieldWeight);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsHidden()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsHidden', array());

        return parent::getIsHidden();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsHidden($isHidden)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsHidden', array($isHidden));

        return parent::setIsHidden($isHidden);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentsEnabled', array());

        return parent::getCommentsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentsEnabled($commentsEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentsEnabled', array($commentsEnabled));

        return parent::setCommentsEnabled($commentsEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhraseId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhraseId', array());

        return parent::getPhraseId();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldTypeParam()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldTypeParam', array());

        return parent::getFieldTypeParam();
    }

    /**
     * {@inheritDoc}
     */
    public function setFieldTypeParam($fieldTypeParam)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFieldTypeParam', array($fieldTypeParam));

        return parent::setFieldTypeParam($fieldTypeParam);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsContentField()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsContentField', array());

        return parent::getIsContentField();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsContentField($isContentField)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsContentField', array($isContentField));

        return parent::setIsContentField($isContentField);
    }

    /**
     * {@inheritDoc}
     */
    public function getShowInEditor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShowInEditor', array());

        return parent::getShowInEditor();
    }

    /**
     * {@inheritDoc}
     */
    public function setShowInEditor($showInEditor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShowInEditor', array($showInEditor));

        return parent::setShowInEditor($showInEditor);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhrase()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhrase', array());

        return parent::getPhrase();
    }

}
