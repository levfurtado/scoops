<?php

namespace Proxy\__CG__\Newscoop\Entity\Snippet;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class SnippetTemplate extends \Newscoop\Entity\Snippet\SnippetTemplate implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'snippets', 'name', 'controller', 'fields', 'templateCode', 'favourite', 'enabled', 'iconInactive', 'iconActive', 'created', 'modified');
        }

        return array('__isInitialized__', 'id', 'snippets', 'name', 'controller', 'fields', 'templateCode', 'favourite', 'enabled', 'iconInactive', 'iconActive', 'created', 'modified');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (SnippetTemplate $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getSnippets()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSnippets', array());

        return parent::getSnippets();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function hasName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasName', array());

        return parent::hasName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getController()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getController', array());

        return parent::getController();
    }

    /**
     * {@inheritDoc}
     */
    public function setController($controller)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setController', array($controller));

        return parent::setController($controller);
    }

    /**
     * {@inheritDoc}
     */
    public function hasController()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasController', array());

        return parent::hasController();
    }

    /**
     * {@inheritDoc}
     */
    public function executeController(\Newscoop\Entity\Snippet $snippet, $update = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'executeController', array($snippet, $update));

        return parent::executeController($snippet, $update);
    }

    /**
     * {@inheritDoc}
     */
    public function hasFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasFields', array());

        return parent::hasFields();
    }

    /**
     * {@inheritDoc}
     */
    public function getFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFields', array());

        return parent::getFields();
    }

    /**
     * {@inheritDoc}
     */
    public function addField(\Newscoop\Entity\Snippet\SnippetTemplate\SnippetTemplateField $field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addField', array($field));

        return parent::addField($field);
    }

    /**
     * {@inheritDoc}
     */
    public function createField(array $parameters)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createField', array($parameters));

        return parent::createField($parameters);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplateCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplateCode', array());

        return parent::getTemplateCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplateCode($templateCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplateCode', array($templateCode));

        return parent::setTemplateCode($templateCode);
    }

    /**
     * {@inheritDoc}
     */
    public function hasTemplateCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasTemplateCode', array());

        return parent::hasTemplateCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getFavourite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFavourite', array());

        return parent::getFavourite();
    }

    /**
     * {@inheritDoc}
     */
    public function setFavourite($favourite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFavourite', array($favourite));

        return parent::setFavourite($favourite);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', array());

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', array($enabled));

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getIconInactive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIconInactive', array());

        return parent::getIconInactive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIconInactive($iconInactive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIconInactive', array($iconInactive));

        return parent::setIconInactive($iconInactive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIconActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIconActive', array());

        return parent::getIconActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIconActive($iconActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIconActive', array($iconActive));

        return parent::setIconActive($iconActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', array());

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', array($created));

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModified', array());

        return parent::getModified();
    }

    /**
     * {@inheritDoc}
     */
    public function setModified($modified = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModified', array($modified));

        return parent::setModified($modified);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

}
